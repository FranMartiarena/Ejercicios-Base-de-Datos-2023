--1 Cantidad de cines (theaters) por estado.

db.theaters.aggregate([{$group: {_id: "$location.address.state", CantidadCines: {$count: {}}}}])

--2 Cantidad de estados con al menos dos cines (theaters) registrados.

db.theaters.aggregate([{$group: {_id: "$location.address.state", CantidadCines: {$count: {}}}}, {$match:{"CantidadCines": {$gte: 2}}}])

--3 Cantidad de películas dirigidas por "Louis Lumière". Se puede responder sin pipeline de agregación, realizar ambas queries.

db.movies.aggregate([{$unwind: "$directors"}, {$group: {_id: "$directors", CantidadPeliculas: {$count: {}}}}, {$match: {"_id": "Louis Lumière"}}])

db.movies.find("directors": {$in: ["Louis Lumière"]}.count()

--4 Cantidad de películas estrenadas en los años 50 (desde 1950 hasta 1959). Se puede responder sin pipeline de agregación, realizar ambas queries.

db.movies.aggregate([{$match: {"year": {$gte: 1950, $lt: 1960}}}, {$group: {_id: null, CantidadPeliculas: {$count:{}}}}])

db.movies.find({"year": {$gte: 1950, $lt: 1960}}).count()

--5 Listar los 10 géneros con mayor cantidad de películas (tener en cuenta que las películas pueden tener más de un género). Devolver el género y la cantidad de películas. Hint: unwind puede ser de utilidad

db.movies.aggregate([ {$unwind: "$genres"}, {$group: {_id: "$genres", CantPeliculas: {$count: {}}}}, {$sort: {"CantPeliculas":-1}}, {$project: {"genres":1, "CantPeliculas":1}}, {$limit: 10}])

--6 Top 10 de usuarios con mayor cantidad de comentarios, mostrando Nombre, Email y Cantidad de Comentarios.

db.comments.aggregate([{$group : {_id: {name: "$name", email: "$email"}, CantComentarios: {$count:{}}}}, {$project: {"name":1, "email":1, CantComentarios:1}}, {$sort: {"CantComentarios":-1}},{$limit: 10}])

--7 Ratings de IMDB promedio, mínimo y máximo por año de las películas estrenadas en los años 80 (desde 1980 hasta 1989), ordenados de mayor a menor por promedio del año.

db.movies.aggregate([{$match: {"year": {$gte: 1980, $lt: 1990}, "imdb.rating": {$ne: ''}}}, {$group: {_id: "$year", PromedioRating: {$avg: "$imdb.rating"}, MaxRating: {$max: "$imdb.rating"}, MinRating: {$min: "$imdb.rating"}}}, {$sort: {"PromedioRating":-1}}])

--8 Título, año y cantidad de comentarios de las 10 películas con más comentarios.

db.movies.aggregate([{$lookup: {from: "comments", localField: "_id", foreignField: "movie_id", as:"Comments"}}, {$project: { "title":1, "year":1, "CantComentarios":{$size: "$Comments" }}}, {$sort: {"CantComentarios":-1}}, {$limit: 10}])

--9 Crear una vista con los 5 géneros con mayor cantidad de comentarios, junto con la cantidad de comentarios.

db.createView("GeneroComentarios", "movies", [{$lookup: {from: "comments", localField: "_id", foreignField: "movie_id", as:"Comments"}}, {$project: {"genres":1, "CantComentarios":{$size: "$Comments" }}}, {$unwind: "$genres"}, {$group: {_id: "$genres", cantidadComentarios: {$sum: "$CantComentarios"}}}, {$sort: {"cantidadComentarios": -1}}, {$limit:10}])

--Listar los actores (cast) que trabajaron en 2 o más películas dirigidas por "Jules Bass". Devolver el nombre de estos actores junto con la lista de películas (solo título y año) dirigidas por “Jules Bass” en las que trabajaron. 
--Hint1: addToSet
--Hint2: {'name.2': {$exists: true}} permite filtrar arrays con al menos 2 elementos, entender por qué.
--Hint3: Puede que tu solución no use Hint1 ni Hint2 e igualmente sea correcta

db.movies.aggregate([{$unwind: "$directors"}, {$match: {"directors":"Jules Bass"}}, {$unwind: "$cast"}, {$group: {_id: "$cast", cantidadPeliculas: {$count: {}}, peliculas: {$addToSet: {"titulo": "$title", "year": "$year"}}}}, {$match: {"cantidadPeliculas": {$gte: 2}}}])

--11 Listar los usuarios que realizaron comentarios durante el mismo mes de lanzamiento de la película comentada, mostrando Nombre, Email, fecha del comentario, título de la película, fecha de lanzamiento. HINT: usar $lookup con multiple condiciones 

db.movies.aggregate([
                    {$lookup: {from:"comments", localField: "_id", foreignField: "movie_id", as:"Comments"}}, 
                    
                    {$unwind: "$Comments"}, 
                    
                    {$match: {$expr: {$and: 
                                        [
                                         {$eq:[{"$month": "$released"}, {"$month": "$Comments.date"}]}, 
                                         {$eq:[{"$year": "$released"}, {"$year": "$Comments.date"}]} 
                                        ]
                                     
                                     }
                             }
                    },
                    {$project: {"Comments.name":1, "Comments.email":1, "released":1, "title":1, "Comments.date":1}}
                   ])
                        
                        
                        
--12 Listar el id y nombre de los restaurantes junto con su puntuación máxima, mínima y la suma total. Se puede asumir que el restaurant_id es único.

--a Resolver con $group y accumulators.
db.restaurants.aggregate( [ {$unwind: "$grades"}, {$group: {_id: {"_id": "$_id", "name":"$name"}, puntuacionMaxima: {$max: "$grades.score"}, puntuacionMinima: {$min: "$grades.score"}, sumaPuntuacion: {$sum: "$grades.score"} }} ] )

--b Resolver con expresiones sobre arreglos (por ejemplo, $sum) pero sin $group.
db.restaurants.aggregate([{$project: {name:1, puntuacionMaxima: {$max: "$grades.score"}, puntuacionMinima: {$min: "$grades.score"}, sumaPuntuacion: {$sum: "$grades.score"} }}])

--c Resolver como en el punto b) pero usar $reduce para calcular la puntuación total.
db.restaurants.aggregate( [{$project: {"name":1, "puntuacionMaxima": {$reduce: {input: "$grades.score", initialValue:0, in:{$max: ["$$value", "$$this"]}}} }}] )

--d Resolver con find.
db.restaurants.find({name:1, puntuacionMaxima: {$max: "$grades.score"}, puntuacionMinima: {$min: "$grades.score"}, sumaPuntuacion: {$sum: "$grades.score"}})                       

                        
                        
                        
--Actualizar los datos de los restaurantes añadiendo dos campos nuevos. 
--a)"average_score": con la puntuación promedio
--b)"grade": con "A" si "average_score" está entre 0 y 13, 
--    con "B" si "average_score" está entre 14 y 27 
--    con "C" si "average_score" es mayor o igual a 28    
--Se debe actualizar con una sola query.
--    HINT1. Se puede usar pipeline de agregación con la operación update
    HINT2. El operador $switch o $cond pueden ser de ayuda.
               

db.restaurants.updateMany(
   { },
   [
      { $set: { average_score: { $avg: "$grades.score" } } },
      {
         $set: {
            grade: {
               $switch: {
                  branches: [
                     { case: { $and: [ { $gte: ["$average_score", 0] }, { $lte: ["$average_score", 13] } ] }, then: "A" },
                     { case: { $and: [ { $gte: ["$average_score", 14] }, { $lte: ["$average_score", 27] } ] }, then: "B" },
                     { case: { $gte: ["$average_score", 28] }, then: "C" }
                  ],
                  default: "Unknown"
               }
            }
         }
      }
   ]
)
                    
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
